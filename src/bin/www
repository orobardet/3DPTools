#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const app = require('../app')({});
const config = app.get('config');
app.logger.debug("Starting HTTP server...")
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || config.get('http:port') || '3000');
const bindAddress = process.env.HOST || config.get('http:host') || '0.0.0.0';
app.set('port', port);
app.set('bindAddress', bindAddress);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Basic events handling
 */
server.on('error', error => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Socket ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
});
server.on('listening', () => {
    const version = config.get('version');
    const addr = server.address();
    if (typeof addr === 'string') {
        app.logger.info(`3DPTools v${version} listening on socket ${addr}`);
    } else {
        let address = 'localhost';
        switch (addr.family.toLowerCase()) {
            case 'ipv6':
                address = addr.address == '::'?'[::1]':`[${addr.address}]`;
                break;
            default:
                address = (addr.address == '0.0.0.0'||addr.address == '127.0.0.1')?'localhost':`${addr.address}`;
                break;
        }
        app.logger.info(`3DPTools v${version} listening on http://${address}:${addr.port} (${addr.family})`);
    }
});

/**
 * Listen on provided port, on all network interfaces.
 */
app.on('ready', () => {
    app.logger.info(`Binding to ${bindAddress}:${port}...`);
    server.listen(port, bindAddress);
});

