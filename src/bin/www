#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const debug = require('debug')('3DPTools:server');
debug('Starting server...');
const app = require('../app')({});
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Basic events handling
 */
server.on('error', error => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
});
server.on('listening', () => {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    const config = app.get('config');
    const version = config.get('version');
    let listeningMEssage = `3DPTools v${version} listening on ${bind}`;
    console.log(listeningMEssage);
    debug(listeningMEssage);
});

/**
 * Listen on provided port, on all network interfaces.
 */
app.on('ready', () => {
    server.listen(port);
});

