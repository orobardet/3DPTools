<script src="/vendor/javascripts/vue<%- (environment === 'production') ? '.min' : '' %>.js"></script>
<script src="/vendor/javascripts/moment.min.js"></script>
<script src="/vendor/javascripts/moment-duration-format.js"></script>
<script src="/vendor/javascripts/numeral/numeral.min.js"></script>
<script src="/vendor/javascripts/numeral/locales.min.js">numeral.locale('<%= getLocale() %>');</script>
<script src="/vendor/locales/fr.js"></script>

<div id="system-information">
    <div>
    <div class="pull-right" v-if="initialized">
        <span class="last-update" v-show="lastUpdateDate">{{ lastUpdateDate.format('Do MMMM YYYY LTS') }}</span>
        <div class="btn-group">
            <button type="button" class="btn btn-default" @click="toggleAutoRefresh()" :class="{ active: autoRefresher.timer, 'btn-success': autoRefresher.timer }">
                <i class="fa fa-refresh"></i> <%- __("Auto refresh (%s)", "{{autoRefresher.currentDelay.label}}"); %>
            </button>
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" :class="{ 'btn-success': autoRefresher.timer }">
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu dropdown-menu-right">
                <li v-for="delay of autoRefresher.delayChoices" @click="setAutoRefreshDelay(delay)"><a data-target="#" data-value="delay.ms" key="delay.label">{{delay.label}}</a></li>
            </ul>
        </div>
    </div>
    <h1><%= __(pageTitle) %></h1>
    </div>
<div id="app-loader" style="text-align: center; font-weight: bold; font-size: larger;margin-top: 50px;" v-if="!initialized">Loading data...</div>

    <div class="row" style="display:none;" v-show="initialized">
        <div class="col-md-6">
            <div class="panel panel-default" v-if="metrics.system">
                <div class="panel-heading"><b><%= __('System') %></b></div>
                <key-value-store>
                    <key-value v-if="metrics.system.arch" name="<%= __('Architecture') %>" :value="metrics.system.arch"></key-value>
                    <key-value v-if="metrics.system.platform" name="<%= __('OS') %>" :value="metrics.system.platform"></key-value>
                </key-value-store>
            </div>

            <div class="panel panel-default" v-if="metrics.app">
                <div class="panel-heading"><b><%= siteTitle %> application</b></div>
                <key-value-store>
                    <key-value v-if="metrics.app.version" name="<%= __('Version') %>" :value="metrics.app.version"></key-value>
                    <key-value v-if="metrics.app.startTstamp" name="<%= __('Started on') %>" :value="metrics.app.startTstamp | dateTime"></key-value>
                    <key-value v-if="metrics.app.uptime" name="<%= __('Uptime') %>" :value="metrics.app.uptime | durationSeconds"></key-value>
                    <key-value v-if="metrics.app.pid" name="<%= __('PID') %>" :value="metrics.app.pid"></key-value>
                    <key-value-header v-if="metrics.app.memoryUsage" name="<%= __('Memory usage') %>"></key-value-header>
                    <key-value v-if="metrics.app.memoryUsage.rss" name="<%= __('RSS') %>" :value="metrics.app.memoryUsage.rss | autoBytes"></key-value>
                    <key-value v-if="metrics.app.memoryUsage.heapUsed || metrics.app.memoryUsage.heapTotal" name="<%= __('Heap') %>" value="">
                        {{ metrics.app.memoryUsage.heapUsed | autoBytes }} / {{ metrics.app.memoryUsage.heapTotal | autoBytes }}
                        <div class="progress" v-show="heapPercentage" style="margin-bottom:0">
                            <div class="progress-bar" role="progressbar" :style="{ width: heapPercentage + '%' }" style="min-width: 2em;">
                                {{ heapPercentage }}%
                            </div>
                        </div>
                    </key-value>
                </key-value-store>
            </div>

        </div>
        <div class="col-md-6">
            <div class="panel panel-default" v-if="metrics.node">
                <div class="panel-heading"><b><%= __('Node.js') %></b></div>
                <key-value-store>
                    <key-value v-if="metrics.node.version" name="<%= __('Version') %>" :value="metrics.node.version"></key-value>
                    <key-value-header v-if="metrics.node.modulesVersions" name="<%= __("Modules' versions") %>"></key-value-header>
                    <key-value v-if="metrics.node.modulesVersions" v-for="(version, name) of metrics.node.modulesVersions" :name="name" :value="version" key="{{'node-module-' + name}}" ></key-value>
                </key-value-store>
            </div>
        </div>
    </div>

    <div class="panel panel-default" v-if="metrics.env">
        <div class="panel-heading"><b><%= __('Environment variables') %></b></div>
        <key-value-store>
            <key-value v-for="(value, name) of metrics.env" :name="name" :value="value" key="{{'env-' + name}}" ></key-value>
        </key-value-store>
    </div>

</div>

<script type="text/x-template" id="v-tpl-key-value-store">
    <table class="table table-key-value"><tbody>
        <slot></slot>
    </tbody></table>
</script>

<script type="text/x-template" id="v-tpl-key-value">
    <tr class="key-value">
        <td class="key">{{ name }}</td>
        <td v-if="value" class="value">{{ value }}</td>
        <td v-else class="value"><slot></slot></td>
    </tr>
</script>

<script type="text/x-template" id="v-tpl-key-value-header">
    <tr class="key-value">
        <td colspan="2" class="key header"> {{ name }}</td>
    </tr>
</script>

<script type="text/javascript">
let sysInfoApp;
$(function () {
    sysInfoApp = new Vue({
        el: '#system-information',
        data: {
            autoRefresher: {
                timer: null,
                delayChoices: [
                    {
                        label: "1s",
                        ms: 1000
                    },
                    {
                        label: "2s",
                        ms: 2000
                    },
                    {
                        label: "5s",
                        ms: 5000
                    },
                    {
                        label: "10s",
                        ms: 10000
                    },
                    {
                        label: "30s",
                        ms: 30000
                    },
                ],
                currentDelay: {
                    label: "5s",
                    ms: 5000
                }
            },
            initialized: false,
            lastUpdateTstamp: null,
            metrics: {}
        },
        computed: {
            lastUpdateDate: function() {
                if (this.lastUpdateTstamp) {
                    return moment(this.lastUpdateTstamp);
                } else {
                    return moment();
                }
            },
            heapPercentage: function() {
                if (this.metrics.app.memoryUsage.heapTotal && this.metrics.app.memoryUsage.heapUsed && this.metrics.app.memoryUsage.heapTotal > 0) {
                    return Math.round(this.metrics.app.memoryUsage.heapUsed * 100 / this.metrics.app.memoryUsage.heapTotal);
                }

                return false;
            }
        },
        filters: {
            durationSeconds: function(seconds) {
                return moment.duration(seconds, "seconds").format("<%= __('Y [year(s)] M [month(s)] d [day(s)] h[h] mm[m] ss[s]') %>");
            },
            dateTime: function(tstamp) {
                return moment(tstamp).format("LLLL:ss");
            },
            autoBytes: function(value) {
                return numeral(value).format('0.0b');
            }
        },
        methods: {
            updateData: function() {
                $.get('/admin/system-information', function (data) {
                    if (data.metrics) {
                        this.metrics = data.metrics;
                        this.initialized = true;
                    }
                    if (data.lastUpdate) {
                        this.lastUpdateTstamp = data.lastUpdate;
                    }
                }.bind(this));
            },
            startAutoRefresh: function(delay) {
                if (this.autoRefresher.timer) {
                    clearInterval(this.autoRefresher.timer);
                }
                delay = delay || this.autoRefresher.currentDelay.ms;
                if (delay === false || delay <= 0) {
                    delay = this.autoRefresher.currentDelay.ms;
                }
                this.autoRefresher.timer = setInterval(function () {
                    this.updateData();
                }.bind(this), delay);
            },
            stopAutoRefresh: function() {
                clearInterval(this.autoRefresher.timer);
                this.autoRefresher.timer = null;
            },
            toggleAutoRefresh: function() {
                if (this.autoRefresher.timer) {
                    this.stopAutoRefresh();
                } else {
                    this.startAutoRefresh(this.autoRefresher.currentDelay.ms);
                }
            },
            setAutoRefreshDelay: function(delay) {
                this.autoRefresher.currentDelay.label = delay.label;
                this.autoRefresher.currentDelay.ms = delay.ms;

                if (this.autoRefresher.timer) {
                    this.startAutoRefresh();
                }
            }
        },
        components: {
            'key-value-store': {
                template: '#v-tpl-key-value-store'
            },
            'key-value': {
                template: '#v-tpl-key-value',
                props: ['name', 'value'],
            },
            'key-value-header': {
                template: '#v-tpl-key-value-header',
                props: ['name'],
            }
        },
        mounted: function() {
            this.updateData();
            this.toggleAutoRefresh();
        },
        beforeDestroy: function() {
            this.stopAutoRefresh();
        }
    });
});
</script>